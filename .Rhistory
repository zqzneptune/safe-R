library(R.matlab)
layout <- readMat('/Users/Anastasia/Laboratory/Utils/Matlab/Networks/safe_app/safe/data/layout_Costanzo2010_150831.mat', fixNames=TRUE)
layout
layout <- layout$layout
layout
layout$label
layout[["label"]]
layout["label"]
layout[1]
t <- layout[1]
t[1]
t[2]
t <- layout[1][1]
t[1]
t[[1]]
t <- layout[1]
t[[1]]
t[[2]]
t <- layout[1][[1]]
t[[1]]
s <- t[[1]]
nodelabels <- $layout[1][[1]]
nodelabels <- layout[1][[1]]
nodelabels[[1]]
t <- unlist(nodelabels)
t <- c(unlist(nodelabels))
t
t <- c(nodelabels)
t[[1]]
s <- t[[1]]
s
t <- do.call(c, unlist(nodelabels))
t <- do.call(c, unlist(nodelabels, recursive=FALSE))
t
t[[1]]
t[[2]]
t <- unlist(nodelabels)
t[[1]]
t[[2]]
t <- unlist(nodelabels)
t[[1]]
nodelabels <- unlist(layout[1][[1]])
layout
nodeLabelsSystematic <- unlist(layout[1][[6]])
layout[1]
layout[6]
nodeLabelsSystematic <- unlist(layout[6][[1]])
nodeLabels <- unlist(layout[1][[1]])
nodeLabelsSystematic <- unlist(layout[6][[1]])
layout
t<-layout[2]
t<-layout[2][[1]]
t<-layout[4]
t<-layout[4][[1]]
t[1][1]
t[1][100]
size(t)
dim(t)
library(R.matlab)
layout <- readMat('/Users/Anastasia/Laboratory/Utils/Matlab/Networks/safe_app/safe/data/layout_Costanzo2010_150831.mat', fixNames=TRUE)
layout <- layout$layout
costanzo2010 <- list()
costanzo2010[["nodeLabels"]] <- unlist(layout[1][[1]])
costanzo2010[["nodeLabelsSystematic"]] <- unlist(layout[6][[1]])
costanzo2010[["nodeX"]] <- layout[2][[1]]
costanzo2010[["nodeY"]] <- layout[3][[1]]
costanzo2010[["edges"]] <- layout[4][[1]]
costanzo2010[["edgesWeights"]] <- layout[5][[1]]
save(costanzo2010, file = "/Users/Anastasia/Laboratory/Utils/R/Networks/safe/data/layout_Costanzo2010_150831.RData")
costanzo2010 <- load("data/layout_Costanzo2010_150831.RData")
costanzo2010
load("data/layout_Costanzo2010_150831.RData")
fields <- names(costanzo2010)
for (i in 1:length(fields)) {
safe[[fields[[i]]]] <- costanzo2010[[fields[[i]]]]
}
names(safe)
source("io/load_settings.R")
source("io/load_network.R")
safe <- load_settings("")
safe <- load_network(safe)
safe <- load_settings("")
safe
safe <- load_network(safe)
safe <- load_network(safe)
safe
safe[["networkfile"]]
is.null(safe[["networkfile"]])
safe <- load_settings("")
safe <- load_network(safe)
source("io/load_settings.R")
source("io/load_network.R")
safe <- load_settings("")
safe <- load_network(safe)
clear()
clean()
source("io/load_settings.R")
source("io/load_network.R")
safe <- load_settings("")
safe <- load_network(safe)
plot(safe[["nodeX"]], safe[["nodeY"]])
plot(safe[["nodeX"]], safe[["nodeY"]], asp=1)
plot(safe[["nodeX"]], safe[["nodeY"]], asp=1, col="white")
par(bg = "black")
plot(safe[["nodeX"]], safe[["nodeY"]], asp=1, col="white")
plot(safe[["nodeX"]], safe[["nodeY"]], asp=1, col="white", col.axis="white")
plot(safe[["nodeX"]], safe[["nodeY"]], asp=1, col="white", col.lab="white")
plot(safe[["nodeX"]], safe[["nodeY"]], asp=1, col="white", xlab="", ylab="", axes=FALSE)
plot(safe[["nodeX"]], safe[["nodeY"]], pch=".", asp=1, col="white", xlab="", ylab="", axes=FALSE)
plot(safe[["nodeX"]], safe[["nodeY"]], pch=".", cex=2, asp=1, col="white", xlab="", ylab="", axes=FALSE)
plot(safe[["nodeX"]], safe[["nodeY"]], pch=".", cex=4, asp=1, col="white", xlab="", ylab="", axes=FALSE)
plot(safe[["nodeX"]], safe[["nodeY"]], pch=16, cex=4, asp=1, col="white", xlab="", ylab="", axes=FALSE)
plot(safe[["nodeX"]], safe[["nodeY"]], pch=16, cex=1, asp=1, col="white", xlab="", ylab="", axes=FALSE)
install.packages("igraph")
install.packages("plotly")
library(igraph)
library(plotly)
par(bg = "black")
network <- plot_ly(type = "scatter", x = safe[["nodeX"]], y = safe[["nodeY"]],
mode = "markers")
network
safe[["nodeX"]]
network <- plot_ly(type = "scatter", x = safe[["nodeX"]], y = safe[["nodeY"]],
mode = "markers")
G <- read.graph("karate.gml", format = c("gml"))
L <- layout.circle(G)
G <- read.graph("karate.gml", format = c("gml"))
ls
ls()
G <- read.graph("karate.gml", format = c("gml"))
G
L <- layout.circle(G)
vs <- V(G)
es <- as.data.frame(get.edgelist(G))
es
Nv <- length(vs)
Ne <- length(es[1]$V1)
Xn <- L[,1]
Yn <- L[,2]
t <- safe[["nodeX"]]
network <- plot_ly(type = "scatter", x = Xn, y = Yn, mode = "markers", text = vs$label, hoverinfo = "text")
network
network <- plot_ly(type = "scatter", x = safe[["nodeX"]], y = safe[["nodeY"]], mode = "markers", text = vs$label, hoverinfo = "text")
network
t<-safe[["nodeX"]]
s<-t[,1]
Xn <- safe[["nodeX"]]
Yn <- safe[["nodeY"]]
network <- plot_ly(type = "scatter", x = Xn[,1], y = Yn[,1],
mode = "markers")
network
par(bg = "black")
network <- plot_ly(type = "scatter", x = Xn[,1], y = Yn[,1],
mode = "markers", asp=1)
network
g <- graph_from_adjacency_matrix(safe[["edges"]])
g
g <- graph_from_adjacency_matrix(safe[["edges"]], mode=c("undirected"))
par(bg = "black")
plot(g, pch=16, vertex.size=10, vertex.color="white")
plot(g, vertex.size=10, vertex.color="white")
plot(g, vertex.size=5, vertex.color="white", vertex.label=NA)
vertex_attr(graph)
vertex_attr(g)
list.vertex.attributes()
list.vertex.attributes(g)
l <- cbind(safe[["nodeX"]], safe[["nodeY"]])
plot(g, vertex.size=5, vertex.color="white", vertex.label=NA, layout=l)
plot(g,
vertex.size=5, vertex.color="white", vertex.frame.width=0, vertex.label=NA,
layout=l)
plot(g,
vertex.size=5, vertex.color="white", vertex.frame=0, vertex.label=NA,
layout=l)
plot(g,
vertex.size=5, vertex.color="white", vertex.width=0, vertex.label=NA,
layout=l)
plot(g,
vertex.size=5, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
layout=l)
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
layout=l)
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.4)
layout=l)
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.4),
layout=l)
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.2),
layout=l)
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.2),
layout=l,
ylim = rev(range(l[,2])))
range(l[,2])
rev(range(l[,2]))
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.2),
layout=l,
ylim = rev(range(l[,2])))
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.2),
layout=l)
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.2),
layout=l,
col.lab="white")
range(l[,2])
l <- cbind(safe[["nodeX"]], -safe[["nodeY"]])
par(bg = "black")
plot(g,
vertex.size=3, vertex.color="white", vertex.frame.color=NA, vertex.label=NA,
edge.color=rgb(1,1,1,0.2),
layout=l)
source("io/plot_network.R")
plot_network(safe)
safe[["annotationfile"]]
source("io/load_settings.R")
source("io/load_network.R")
source("io/plot_network.R")
safe <- load_settings("")
safe <- load_network(safe)
safe[["annotationfile"]]
data <- read.table(safe[["annotationfile"]])
data <- read.table(safe[["annotationfile"]], skip=1)
data <- read.table(safe[["annotationfile"]], comment.char="#")
data <- read.table(safe[["annotationfile"]], comment.char="#", sep="\t")
data
data <- read.table(safe[["annotationfile"]], comment.char="#", sep="\t",
na.strings=c("NaN","None"))
data[1]
data[2]
data[3]
data[4]
data[4][1]
data[4,1][1]
data[4][1]
data <- read.table(safe[["annotationfile"]], header=TRUE,
comment.char="#", sep="\t",
na.strings=c("NaN","None"))
data[1]
data[3]
data[4]
length(data[2])
length(data[,2])
length(data[,4])
length(data[,5])
length(data[,6])
length(data[,7])
length(data[,8])
length(data[,9])
length(data[,10])
data[,"YAL001C"]
data <- read.table(safe[["annotationfile"]], header=TRUE,
comment.char="#", sep="\t",
na.strings=c("NaN","None"))
data["YAL001C",]
data <- read.table(safe[["annotationfile"]], header=TRUE,
comment.char="#", sep="\t",
na.strings=c("NaN","None"))
data["YAL001C",]
t(data["YAL001C",])
ncol(data)
nrow(data)
help(data)
head(data)
row.names(data)
col.names(data)
rownames(data)
colnames(data)
mtcars
nrow(mtcars)
rownames(mtcars)
data <- read.table(safe[["annotationfile"]], header=TRUE,
row.names=1,
comment.char="#", sep="\t",
na.strings=c("NaN","None"))
rownames(data)
ncol(data)
1:ncol(data)
safe[["attributeIds"]] <- 1:ncol(data)
colnames(data)
node2attribute <- matrix(nrow=length(safe[["nodeLabel"]]), ncol=ncol(data))
names(safe)
node2attribute <- matrix(nrow=length(safe[["nodeLabels"]]), ncol=ncol(data))
t <- data[safe[["nodeLabels"]],]
t <- data[safe[["nodeLabels"]],,drop=FALSE]
rownames(t)
safe[["nodeLabels"]][1:10]
t <- data[safe[["nodeLabelsSystematic"]],,drop=FALSE]
rownames(t)[1:10]
safe[["nodeLabelsSystematic"]][1:10]
data(t)
t[]
t[,1]
t[1,1]
t[1:,1]
s <- as.matrix(t)
safe[["node2attribute"]] <- as.matrix(t)
safe
t <- sum(data, na.rm=TRUE)
t <- colSums(data, na.rm=TRUE)
nrow(data)
safe[["attributeLabelNumber"]] <- nrow(data)
length(node2attribute(is.na(node2attribute)))
node2attribute <- data[safe[["nodeLabelsSystematic"]],,drop=FALSE]
node2attribute <- as.matrix(node2attribute)
length(is.na(node2attribute))
node2attribute[is.na(node2attribute)] <- 0
length(is.na(node2attribute))
is.na(node2attribute)
t <- is.na(node2attribute)
node2attribute[is.na(node2attribute)] <- 0
length(is.na(node2attribute))
length(is.na(node2attribute)==TRUE)
2838*9
length(is.na(node2attribute)==FALSE)
length(node2attribute(is.na(node2attribute)))
length(node2attribute[is.na(node2attribute)])
t<-!logical(length=ncol(data))
?dist
x <- cbind(safe[["nodeX"]], safe[["nodeY"]])
euclid <- dist(x, method="euclidean")
dim(euclid)
e <- as.matrix(euclid)
dim(e)
e[1:10][1:10]
e[1:10,1:10]
euclid <- as.matrix(dist(x, method="euclidean"))
library(igraph)
g <- graph_from_adjacency_matrix(safe[["edges"]], mode=c("undirected"))
p <- all_shortest_paths(g, weights=euclid)
p <- distances(g, weights=euclid)
names(safe)
g <- graph_from_adjacency_matrix(safe[["edgesWeights"]], mode = c("undirected"), weighted = TRUE)
euclid[safe[["edges"]]==0] <- 0
g <- graph_from_adjacency_matrix(euclid, mode = c("undirected"), weighted = TRUE)
p <- distances(g)
dim(p)
p[1:10,1:10]
source("extras/compute_node_distances.R")
safe <- compute_node_distances(safe)
names(safe)
source("extras/compute_node_distances.R")
safe <- compute_node_distances(safe)
names(safe)
source("io/load_settings.R")
source("io/load_network.R")
source("io/plot_network.R")
source("io/load_attributes.R")
source("extras/compute_node_distances.R")
safe <- load_settings("")
safe <- load_network(safe)
safe <- load_attributes(safe)
safe <- compute_node_distances(safe)
safe <- load_attributes(safe)
safe <- load_settings("")
safe <- load_network(safe)
safe <- load_attributes(safe)
source("io/load_settings.R")
source("io/load_network.R")
source("io/plot_network.R")
source("io/load_attributes.R")
source("extras/compute_node_distances.R")
safe <- load_settings("")
safe <- load_network(safe)
safe <- load_attributes(safe)
safe <- compute_node_distances(safe)
names(safe)
plot_network(safe)
safe[["neighborhoodRadius"]]
r <- quantile(safe[["nodeDistance"]], c(safe[["neighborhoodRadius"]]))
as.numeric(safe[["neighborhoodRadius"]])
as.numeric("0.3")
as.numeric(0.3)
safe[["neighborhoodRadius"]] <- as.numeric(safe[["neighborhoodRadius"]])
r <- quantile(safe[["nodeDistance"]], c(safe[["neighborhoodRadius"]])
)
r
safe[["neighborhoodRadius"]] <- as.numeric(safe[["neighborhoodRadius"]])/100
safe[["neighborhoodRadius"]]
r <- quantile(safe[["nodeDistance"]], c(safe[["neighborhoodRadius"]]))
r
help("quantile")
r <- quantile(safe[["nodeDistance"]], c(safe[["neighborhoodRadius"]]),
na.rm = True)
r <- quantile(safe[["nodeDistance"]], c(safe[["neighborhoodRadius"]]),
na.rm = TRUE)
r
r <- quantile(safe[["nodeDistance"]], c(safe[["neighborhoodRadius"]]),
na.rm = TRUE, type = 1)
r
N <- safe[["nodeDistance"]] <= r
dim(N)
N[1:10,1:10]
NLBL <- length(safe[["nodeLabels"]])
NGRP <- length(safe[["attributeNames"]])
N <- matrix(data = NLBL, nrow = NLBL, ncol = NGRP)
Ng <- rep(colSums(safe[["node2attribute"]], na.rm = TRUE), times = NLBL)
?rep
?rbind
Ng <- rbind(colSums(safe[["node2attribute"]], na.rm = TRUE), c = NLBL)
t<-colSums(safe[["node2attribute"]], na.rm = TRUE)
Ng <- matrix(rep(colSums(safe[["node2attribute"]], na.rm = TRUE), nrow = NLBL))
Ng <- matrix(rep(colSums(safe[["node2attribute"]], na.rm = TRUE), each = NLBL), nrow = NLBL)
Ng[1:10,]
safe[["node2attribute"]][1:10,]
safe[["node2attribute"]][1,1]
safe[["node2attribute"]][1,2]
safe[["node2attribute"]][1,3]
safe[["node2attribute"]][1,4]
safe[["node2attribute"]][1,5]
safe[["node2attribute"]][1,6]
safe[["node2attribute"]][1,7]
safe[["node2attribute"]][5,1]
t <- colSums(safe[["node2attribute"]])
t
t[1:10]
t[1]
Ni <- rowSums(safe[["neighborhoods"]], na.rm = TRUE)
safe[["neighborhoods"]] <- safe[["nodeDistance"]] <= r
Ni <- rowSums(safe[["neighborhoods"]], na.rm = TRUE)
Ni
t(Ni)
Ni(1)
Ni[1]
Ni[2]
Ni[3]
Ni[4]
Ni[5]
Ni[6]
Ni[7]
names(safe)
Nig <- safe[["neighborhoods"]] %*% safe[["node2attribute"]]
Nig[1:10,]
Nig[1,1]
Nig[1,2]
Nig[1,3]
Nig[1,4]
Nig[1,5]
Sr <- array(data = NA, dim = c(NLBL, NGRP, nPermutations))
nPermutations <- 1000
Sr <- array(data = NA, dim = c(NLBL, NGRP, nPermutations))
dim(Sr)
r <- 1
ixPerm <- sample(NLBL, size = NLBL, replace = FALSE)
Wr <- safe[["node2attribute"]][ixPerm,]
Sr[,,r] <- safe[["neighborhoods"]] %*% Wr
for (r in 1:nPermutations) {
ixPerm <- sample(NLBL, size = NLBL, replace = FALSE)
Wr <- safe[["node2attribute"]][ixPerm,]
Sr[,,r] <- safe[["neighborhoods"]] %*% Wr
}
for (r in 1:nPermutations) {
ixPerm <- sample(NLBL, size = NLBL, replace = FALSE)
Wr <- safe[["node2attribute"]][ixPerm,]
Sr[,,r] <- safe[["neighborhoods"]] %*% Wr
r
}
safe[["pval"]] <- matrix(data = NA, dim = c(NLBL, NGRP))
safe[["pval"]] <- matrix(data = NA, nrow = NLBL, ncol = NGRP)
grp <- 1
Sm <- apply(Sr(,grp,), c(1,2), mean)
Sm <- apply(Sr[,grp,], c(1,2), mean)
dim(Sm)
dim(Sr)
t<- Sr[,grp,]
dim(t)
Sm <- rowMeans(Sr[,grp,], na.rm = TRUE)
?apply
Ss <- apply(Sr[,grp,], 1, mean, na.rm = TRUE)
Ss <- apply(Sr[,grp,], 1, sd, na.rm = TRUE)
Z <- (Nig[,grp] - Sm) / Ss
?pnorm
grp
t <- pnorm(Nig[,gr,], mean = Sm, sd = Ss, lower.tail = TRUE, log.p = FALSE)
t <- pnorm(Nig[,grp,], mean = Sm, sd = Ss, lower.tail = TRUE, log.p = FALSE)
t <- pnorm(Nig[,grp], mean = Sm, sd = Ss, lower.tail = TRUE, log.p = FALSE)
t[1:10]
safe[["pval"]] <- matrix(data = NA, nrow = NLBL, ncol = NGRP)
t1 <- pnorm(Nig[,grp], mean = Sm, sd = Ss, lower.tail = FALSE, log.p = FALSE)
t2 <- pnorm(Nig[,grp], mean = Sm, sd = Ss, lower.tail = TRUE, log.p = FALSE)
safe[["pval"]][,grp,1] <- t1
safe[["pval"]][,grp,1] <- t2
safe[["pval"]] <- array(data = NA, dim = c(NLBL, NGRP, 2))
t1 <- pnorm(Nig[,grp], mean = Sm, sd = Ss, lower.tail = FALSE, log.p = FALSE)
t2 <- pnorm(Nig[,grp], mean = Sm, sd = Ss, lower.tail = TRUE, log.p = FALSE)
safe[["pval"]][,grp,1] <- t1
safe[["pval"]][,grp,1] <- t2
dim(safe[["pval"]])
safe[["opacity"]] <- -log10(safe[["pval"]])
m <- safe[["MAX_LOG10_PVAL"]]
safe[["opacity"]][safe[["opacity"]] > m] <- m
safe[["opacity"]] <- safe[["opacity"]] / m
safe[["MAX_LOG10_PVAL"]] <- as.numeric(safe[["MAX_LOG10_PVAL"]])
safe[["opacity"]] <- -log10(safe[["pval"]])
m <- safe[["MAX_LOG10_PVAL"]]
safe[["opacity"]][safe[["opacity"]] > m] <- m
safe[["opacity"]] <- safe[["opacity"]] / m
safe[["thresholdOpacity"]] <- -log10(safe[["THRESHOLD_ENRICHMENT"]]/length(safe[["attributeIds"]]))/safe[["MAX_LOG10_PVAL"]]
safe[["THRESHOLD_ENRICHMENT"]]
safe[["THRESHOLD_ENRICHMENT"]] <- as.numeric(safe[["THRESHOLD_ENRICHMENT"]])
safe[["thresholdOpacity"]] <- -log10(safe[["THRESHOLD_ENRICHMENT"]]/length(safe[["attributeIds"]]))/safe[["MAX_LOG10_PVAL"]]
